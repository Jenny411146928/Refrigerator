package tw.edu.pu.csim.refrigerator.ui

import android.net.Uri
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.grid.rememberLazyGridState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.AsyncImage
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import tw.edu.pu.csim.refrigerator.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FavoriteRecipeScreen(
    navController: NavController,
    recipes: List<Triple<String, String, String?>>
) {
    var query by remember { mutableStateOf("") }
    var recipeList by remember { mutableStateOf(recipes) } // ‚úÖ Êñ∞Â¢ûÔºöÂèØÂç≥ÊôÇÊõ¥Êñ∞ÂàóË°®
    val context = LocalContext.current
    val db = remember { FirebaseFirestore.getInstance() }
    val coroutineScope = rememberCoroutineScope()

    // ‚úÖ Êñ∞Â¢ûÔºöÂæû Firebase ËºâÂÖ•Êî∂ËóèÈ£üË≠ú
    LaunchedEffect(Unit) {
        try {
            val uid = FirebaseAuth.getInstance().currentUser?.uid
            if (uid != null) {
                val snapshot = db.collection("users").document(uid)
                    .collection("favorites").get().await()

                val fetched = snapshot.documents.map {
                    Triple(
                        it.id,
                        it.getString("title") ?: "",
                        it.getString("imageUrl")
                    )
                }

                recipeList = fetched
                android.util.Log.d("FavoriteRecipeScreen", "‚úÖ Â∑≤Âæû Firebase ËÆÄÂèñÊî∂Ëóè ${fetched.size} Á≠Ü")
            } else {
                android.util.Log.e("FavoriteRecipeScreen", "‚ùå Â∞öÊú™ÁôªÂÖ•ÔºåÁÑ°Ê≥ïËºâÂÖ•Êî∂Ëóè")
            }
        } catch (e: Exception) {
            android.util.Log.e("FavoriteRecipeScreen", "‚ùå ËºâÂÖ•Êî∂ËóèÂ§±Êïó: ${e.message}")
        }
    }

    // üîπ ÈÅéÊøæÊúÄÊÑõÈ£üË≠úÔºàÊ≤øÁî®ÂéüÊú¨ÈÇèËºØÔºâ
    val filtered = remember(query, recipeList) {
        val q = query.trim().lowercase()
        if (q.isEmpty()) recipeList
        else recipeList.filter { (_, title, _) ->
            title.lowercase().contains(q)
        }
    }

    // LazyGrid ÁãÄÊÖãËàáÂõûÈ†ÇÈÉ®ÊéßÂà∂
    val listState = rememberLazyGridState()
    val showButton by remember {
        derivedStateOf { listState.firstVisibleItemIndex > 2 } // Ë∂ÖÈÅé3ÂºµÂç°ÊâçÈ°ØÁ§∫
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(Modifier.fillMaxSize().padding(16.dp)) {
            // ÊêúÂ∞ãÊ¨ÑÔºàÂíåÈ£üË≠úÈ†Å‰∏ÄÊ®£Ôºâ
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .clip(RoundedCornerShape(1000.dp))
                    .background(Color(0xFFD9D9D9))
                    .padding(horizontal = 12.dp, vertical = 6.dp)
                    .fillMaxWidth()
            ) {
                Icon(
                    painter = painterResource(R.drawable.search),
                    contentDescription = "Search Icon",
                    modifier = Modifier.padding(end = 8.dp).size(22.dp),
                    tint = Color.Unspecified
                )
                TextField(
                    value = query,
                    onValueChange = { query = it },
                    placeholder = { Text("ÊêúÂ∞ãÊî∂ËóèÈ£üË≠ú") },
                    textStyle = TextStyle(color = Color(0xFF504848), fontSize = 15.sp),
                    colors = TextFieldDefaults.textFieldColors(
                        containerColor = Color.Transparent,
                        focusedIndicatorColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent
                    ),
                    modifier = Modifier.weight(1f)
                )
            }

            Spacer(Modifier.height(8.dp))

            if (filtered.isEmpty()) {
                Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text("Â∞öÊú™Êî∂Ëóè‰ªª‰ΩïÈ£üË≠ú", style = MaterialTheme.typography.bodyLarge)
                }
            } else {
                LazyVerticalGrid(
                    columns = GridCells.Fixed(2),
                    state = listState, // üîπ Á∂ÅÂÆö stateÔºåËÆì FAB ËÉΩÊéßÂà∂ÊªæÂãï
                    contentPadding = PaddingValues(8.dp),
                    modifier = Modifier.weight(1f)
                ) {
                    items(filtered, key = { it.first }) { (id, title, imageUrl) ->
                        Surface(
                            shape = MaterialTheme.shapes.medium,
                            tonalElevation = 0.dp,
                            modifier = Modifier
                                .padding(6.dp)
                                .clickable {
                                    val encodedId = Uri.encode(id)
                                    navController.navigate("recipeDetail/$encodedId")   // ‚úÖ ÊîπÈÄôË£°
                                }

                        ) {
                            Column {
                                // ÂúñÁâáÔºàÁµ±‰∏ÄÈ´òÂ∫¶Ôºâ
                                AsyncImage(
                                    model = imageUrl ?: "https://i.imgur.com/zMZxU8v.jpg",
                                    contentDescription = title,
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(140.dp)
                                        .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),
                                    contentScale = ContentScale.Crop
                                )

                                // ÁÅ∞Ëâ≤Ê®ôÈ°åÊ°ÜÔºàÂõ∫ÂÆöÈ´òÂ∫¶ÔºåÊúÄÂ§öÂÖ©Ë°åÂ≠óÔºâ
                                val titleBoxHeight = with(LocalDensity.current) {
                                    (MaterialTheme.typography.bodyLarge.lineHeight * 2).toDp() + 16.dp
                                }
                                Box(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .background(Color(0xFFEAEAEA))
                                        .height(titleBoxHeight)
                                        .padding(8.dp),
                                    contentAlignment = Alignment.CenterStart
                                ) {
                                    Text(
                                        text = title,
                                        maxLines = 2,
                                        overflow = TextOverflow.Ellipsis,
                                        style = MaterialTheme.typography.bodyLarge
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }

        // üîπ ÂõûÈ†ÇÈÉ®ÊåâÈàïÔºàËàáÈ£üË≠úÈ†Å‰∏ÄËá¥Ôºâ
        AnimatedVisibility(
            visible = showButton,
            enter = fadeIn() + scaleIn(),
            exit = fadeOut() + scaleOut(),
            modifier = Modifier.align(Alignment.BottomEnd).padding(16.dp)
        ) {
            FloatingActionButton(
                onClick = {
                    coroutineScope.launch {
                        listState.animateScrollToItem(0)
                    }
                },
                containerColor = Color(0xFFABB7CD)
            ) {
                Icon(
                    imageVector = Icons.Default.KeyboardArrowUp,
                    contentDescription = "ÂõûÂà∞È†ÇÈÉ®",
                    tint = Color.White
                )
            }
        }
    }
}
